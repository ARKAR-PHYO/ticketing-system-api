// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  userName     String   @unique
  email        String
  password     String
  mobileNumber String
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // RELATIONS
  roleName               String
  role                   Role           @relation(fields: [roleName], references: [name])
  // ticketsAssigned     Ticket[] @relation("responsiblePerson")
  ticketsResponsibleFor  Ticket[]       @relation("TicketResponsiblePerson")
  ticketsCreated         Ticket[]       @relation("TicketCreatedBy")
  ticketParticipantIds   String[]       @db.ObjectId
  ticketsParticipatingIn Ticket[]       @relation("TicketParticipants", fields: [ticketParticipantIds], references: [id])
  FcmTokens              FcmToken[]
  Notifications          Notification[]
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  permission  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // RELATIONS
  user Users[]
}

enum Privacies {
  private
  public
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  tickets Ticket[] @relation("TicketProject")
}

enum TicketStatus {
  pending
  on_going
  completed
}

model Ticket {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  ticketNumber String
  title        String
  body         String?
  status       TicketStatus @default(pending)
  deadline     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt

  // RELATIONS
  project             Project  @relation("TicketProject", fields: [projectId], references: [id])
  projectId           String   @db.ObjectId
  responsiblePerson   Users    @relation("TicketResponsiblePerson", fields: [responsiblePersonId], references: [id])
  responsiblePersonId String   @db.ObjectId
  createdBy           Users    @relation("TicketCreatedBy", fields: [createdById], references: [id])
  createdById         String   @db.ObjectId
  participants        Users[]  @relation("TicketParticipants", fields: [participantIds], references: [id])
  participantIds      String[] @db.ObjectId
}

model FcmToken {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  fcmToken  String
  userToken String

  userId String? @db.ObjectId
  user   Users?  @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  isRead    Boolean
  createdAt DateTime @default(now())
  userId    String?  @db.ObjectId
  user      Users?   @relation(fields: [userId], references: [id])
}
